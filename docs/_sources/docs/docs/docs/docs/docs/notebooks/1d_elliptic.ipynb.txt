{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc207909",
   "metadata": {},
   "source": [
    "# МКР для решения 1D линейного эллиптического уравнения"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc4269bf",
   "metadata": {},
   "source": [
    "## Постановка задачи\n",
    "\n",
    "Необходимо найти функцию $u(x)$, такую что:\n",
    "\n",
    "\\begin{align}\n",
    "&\\frac{\\partial}{\\partial x} E \\frac{\\partial u}{\\partial x} + f = 0 \\\\\n",
    "&u(0) = 0, u(1) = 0.001 \\\\\n",
    "&E = 10. \\\\\n",
    "&f = 2x + 1\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c16e6120",
   "metadata": {},
   "source": [
    "## Аналитическое решение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "50df3a0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle u{\\left(x \\right)} = - \\frac{x^{3}}{30} - \\frac{x^{2}}{20} + 0.0843333333333333 x$"
      ],
      "text/plain": [
       "          3    2                       \n",
       "         x    x                        \n",
       "u(x) = - ── - ── + 0.0843333333333333⋅x\n",
       "         30   20                       "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sympy as sp\n",
    "sp.init_printing()\n",
    "\n",
    "u = sp.Function('u')\n",
    "x = sp.symbols('x')\n",
    "\n",
    "E = 10\n",
    "f = 2 * x + 1\n",
    "\n",
    "equation = (E * u(x).diff(x, 1)).diff(x, 1) + f\n",
    "\n",
    "exact = sp.dsolve(equation, \n",
    "                  ics={u(0):0, u(1):0.001})\n",
    "display(exact)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "059b859c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fc2d498f9a0>]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x_exact = np.arange(0., 1.05, 0.05)\n",
    "plt.plot(x_exact, [exact.rhs.subs({x:i}) for i in x_exact])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9157029",
   "metadata": {},
   "source": [
    "## Численное решение\n",
    "\n",
    "1. Определяем узлы конечно-разностной сетки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb58ae05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.16666666666666666, 0.3333333333333333, 0.5, 0.6666666666666666, 0.8333333333333333, 1.0]\n"
     ]
    }
   ],
   "source": [
    "n = 6 # количество узлов\n",
    "h = 1./n # шаг конечной разности\n",
    "x_nodes = [i * h for i in range(n + 1)]\n",
    "print(x_nodes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63c1886",
   "metadata": {},
   "source": [
    "2. Определяем искомую функцию и ее аппроксимацию в узлах"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8959adbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[u(0), u(1), u(2), u(3), u(4), u(5), u(6)]\n"
     ]
    }
   ],
   "source": [
    "u = sp.Function('u')\n",
    "u_approx = [u(i) for i in range(n + 1)]\n",
    "print(u_approx)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c7b6e1",
   "metadata": {},
   "source": [
    "3. Используя конечные разности и полагая Е постоянной:\n",
    "\n",
    "\\begin{align}\n",
    "\\left.\\frac{\\partial u(x)}{\\partial x}\\right|_{x_i} = \\frac{u(x_{i+1}) - u(x_{i-1})}{2h} + O(h^2)\\\\\n",
    "\\left.\\frac{\\partial}{\\partial x} E \\frac{\\partial u}{\\partial x}\\right|_{x_i} = E \\frac{u(x_{i+1}) - 2u(x_{i}) + u(x_{i-1})}{h^2} + O(h^2)\n",
    "\\end{align}\n",
    "\n",
    "запишем систему конечно-разностных уравнений:\n",
    "\n",
    "\\begin{align}\n",
    "E \\frac{u(x_{i+1}) - 2u(x_{i}) + u(x_{i-1})}{h^2} + 2x_i + 1 = 0.\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c98f099f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-720.0*u(1) + 360.0*u(2) + 1.33333333333333,\n",
      " 360.0*u(1) - 720.0*u(2) + 360.0*u(3) + 1.66666666666667,\n",
      " 360.0*u(2) - 720.0*u(3) + 360.0*u(4) + 2.0,\n",
      " 360.0*u(3) - 720.0*u(4) + 360.0*u(5) + 2.33333333333333,\n",
      " 360.0*u(4) - 720.0*u(5) + 3.02666666666667]\n"
     ]
    }
   ],
   "source": [
    "equations = [(E * (u_approx[i + 1] - 2 * u_approx[i] + u_approx[i - 1])/h**2 + 2. * x_nodes[i] + 1.)\n",
    "             .subs({u(0):0, u(n):0.001})\n",
    "             for i in range(1, n)]\n",
    "import pprint\n",
    "pprint.pprint(equations)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13012f33",
   "metadata": {},
   "source": [
    "4. Решим систему линейных алгебраических уравнений"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b98381d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{(0.0125123456790123, 0.021320987654321, 0.0255, 0.0241234567901235, 0.0162654320987654)}\n"
     ]
    }
   ],
   "source": [
    "solution = sp.linsolve(equations, u_approx[1:n])\n",
    "print(solution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6f715ba4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{u(1): 0.0125123456790123, u(2): 0.0213209876543210, u(3): 0.0255000000000000, u(4): 0.0241234567901235, u(5): 0.0162654320987654, u(0): 0, u(6): 0.001}\n"
     ]
    }
   ],
   "source": [
    "solution = list(solution)\n",
    "approx = {u_approx[i+1] : solution[0][i] for i in range(len(solution[0]))}\n",
    "approx.update({u(0):0, u(n):0.001})\n",
    "print(approx)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d779eb2",
   "metadata": {},
   "source": [
    "## Анализ решения\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f2be322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc2cc88b460>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "\n",
    "plt.plot(x_exact, [exact.rhs.subs({x:i}) for i in x_exact], label='exact')\n",
    "plt.scatter(x_nodes, [approx[u_p] for u_p in u_approx], label='approx')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52ffa632",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
