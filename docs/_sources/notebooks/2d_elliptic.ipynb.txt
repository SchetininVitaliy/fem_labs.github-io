{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ec004a80",
   "metadata": {},
   "source": [
    "# МКР для решения 2D линейного эллиптического уравнения скалярного переменного\n",
    "\n",
    "## Задача c граничными условиями Дирихле\n",
    "\n",
    "Необходимо найти поле температуры $T$ в прямоугольной пластине. Значение поля на каждой грани пластины известно. Пластина изотропна и коэффициент теплопроводности $\\lambda=1.$.\n",
    "\n",
    "![fd_2d_task](../images/fd_2d_task.svg)\n",
    "\n",
    "Поле температур будет удовлетворять уравнению:\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{\\partial}{\\partial x_1}\\left(\\lambda \\frac{\\partial T}{\\partial x_1}\\right) + \\frac{\\partial}{\\partial x_2}\\left(\\lambda \\frac{\\partial T}{\\partial x_2}\\right)  = 0.\n",
    "\\end{align}\n",
    "\n",
    "### Численное решение\n",
    "\n",
    "1. Построим конечно-разностную сетку:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e9f1151d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7fca182a7130>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "L_1, L_2 = 10., 5\n",
    "n_1, n_2 = 4, 4 # количество узлов\n",
    "h_1, h_2 = L_1/(n_1 - 1), L_2/(n_2 - 1) # шаг конечной разности\n",
    "\n",
    "x_nodes = np.array([[i * h_1, j * h_2] for i in range(n_1) for j in range(n_2)])\n",
    "\n",
    "plt.scatter(x_nodes[:, 0], x_nodes[:, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47d05fe1",
   "metadata": {},
   "source": [
    "2. Используя конечно разностные аппроксимации производных, запишем систему уравнений:\n",
    "\n",
    "\\begin{align}\n",
    "\\left.\\frac{\\partial}{\\partial x_1} \\left(\\lambda \\frac{\\partial T}{\\partial x_1}\\right)\\right|_{x_{i, j}} \\approx \\lambda \\frac{T(x_{i+1, j}) - 2T(x_{i, j}) + T(x_{i-1, j})}{h_1^2} \\\\\n",
    "\\left.\\frac{\\partial}{\\partial x_2} \\left(\\lambda \\frac{\\partial T}{\\partial x_2}\\right)\\right|_{x_{i, j}} \\approx \\lambda \\frac{T(x_{i, j+1}) - 2T(x_{i, j}) + T(x_{i, j-1})}{h_2^2}\n",
    "\\end{align}\n",
    "\n",
    "\\begin{align}\n",
    "\\lambda \\frac{T(x_{i+1, j}) - 2T(x_{i, j}) + T(x_{i-1, j})}{h_1^2} + \\lambda \\frac{T(x_{i, j+1}) - 2T(x_{i, j}) + T(x_{i, j-1})}{h_2^2} = 0\n",
    "\\end{align}\n",
    "\n",
    "Для поиска решения с помощью методов линейной алгебры необходимо свести систему к матричному виду:\n",
    "\n",
    "\\begin{align}\n",
    "[A] \\{T\\} = 0,\n",
    "\\end{align}\n",
    "\n",
    "где $[A]$ - матрица коэфициентов, $\\{T\\}$ - вектор температур в узлах сетки.\n",
    "\n",
    "Для построения матрицы коэффициентов необходимо двумерную нумерацию узлов свести к одномерной. Для этого заменим индексы $i, j$ на индекс $k = i * n_1 + j$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "13ac4bdb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     0     1     2    3     4     5     6     7     8     9     10    11   12  \\\n",
      "0   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "1   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "2   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "3   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "4   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "5   0.0  0.09  0.00  0.0  0.09 -1.38  0.09  0.00  0.00  0.09  0.00  0.00  0.0   \n",
      "6   0.0  0.00  0.09  0.0  0.00  0.09 -1.38  0.09  0.00  0.00  0.09  0.00  0.0   \n",
      "7   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "8   0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "9   0.0  0.00  0.00  0.0  0.00  0.09  0.00  0.00  0.09 -1.38  0.09  0.00  0.0   \n",
      "10  0.0  0.00  0.00  0.0  0.00  0.00  0.09  0.00  0.00  0.09 -1.38  0.09  0.0   \n",
      "11  0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "12  0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "13  0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "14  0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "15  0.0  0.00  0.00  0.0  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.0   \n",
      "\n",
      "      13    14   15  \n",
      "0   0.00  0.00  0.0  \n",
      "1   0.00  0.00  0.0  \n",
      "2   0.00  0.00  0.0  \n",
      "3   0.00  0.00  0.0  \n",
      "4   0.00  0.00  0.0  \n",
      "5   0.00  0.00  0.0  \n",
      "6   0.00  0.00  0.0  \n",
      "7   0.00  0.00  0.0  \n",
      "8   0.00  0.00  0.0  \n",
      "9   0.09  0.00  0.0  \n",
      "10  0.00  0.09  0.0  \n",
      "11  0.00  0.00  0.0  \n",
      "12  0.00  0.00  0.0  \n",
      "13  0.00  0.00  0.0  \n",
      "14  0.00  0.00  0.0  \n",
      "15  0.00  0.00  0.0  \n"
     ]
    }
   ],
   "source": [
    "def k(i, j):\n",
    "    return i * n_1 + j\n",
    "\n",
    "l = 1.\n",
    "\n",
    "A = np.zeros((n_1 * n_2, n_1 * n_2))\n",
    "for i in range(1, n_1 - 1):\n",
    "    for j in range(1, n_2 - 1):\n",
    "        A[k(i, j)][k(i + 1, j)] = l / h_1 ** 2\n",
    "        A[k(i, j)][k(i, j)] = -2. / h_1 ** 2 - 2. / h_2\n",
    "        A[k(i, j)][k(i - 1, j)] = l / h_1 ** 2\n",
    "        A[k(i, j)][k(i, j + 1)] = l / h_1 ** 2\n",
    "        A[k(i, j)][k(i, j - 1)] = l / h_1 ** 2\n",
    "\n",
    "import pandas as pd\n",
    "print(pd.DataFrame(A))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1828be",
   "metadata": {},
   "source": [
    "3. Добавим в систему граничные условия:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "695f33ff",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4b64ff0a",
   "metadata": {},
   "source": [
    "4. Решим СЛАУ:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a17b563",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linalg.solve(A, b)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
